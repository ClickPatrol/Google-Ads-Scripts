/**
 * Google Ads Script: Hourly & Daily Spend Logger  
 * Purpose: Log historical campaign spend to detect retroactive adjustments by Google
 * Author: ClickPatrol - Bernt Muurling – 2025
 *
 * Why use this script?
 * ───────────────────
 * Google Ads can retroactively adjust spend data without notification. These adjustments may not 
 * always appear on your invoice or be visible in the dashboard. When ClickPatrol detects and blocks
 * fraudulent clicks, Google may adjust your spend data retroactively. This script creates a historical 
 * record by logging your spend data daily. After X days, YOU manually compare the logged data 
 * in your spreadsheet with the current dashboard values for the same period to identify any 
 * discrepancies and validate that spend adjustments occurred.
 *
 * Important notes:
 * • We've observed that even HOURLY spend can be adjusted retroactively by Google
 * • This logged data is for INDICATION purposes only - it shows what Google reported at the time
 * • The script does NOT perform automatic comparisons - YOU must analyze the data yourself
 * • We recommend analyzing DAILY costs first, then dive into hourly data if needed for deeper investigation
 * • This tool is provided as-is for support purposes only
 * • We do NOT provide further support on this script, as implementation varies per account
 * • As a specialist, you know best how to validate and interpret this data for your account
 *
 * Setup instructions:
 * ──────────────────
 * 1. Make your OWN COPY of the spreadsheet (File → Make a copy)
 * 2. Update SPREADSHEET_URL below with your copied spreadsheet URL
 * 3. Configure the optional settings below if needed (don't change it when you don't need to)
 * 4. Schedule this script to run HOURLY in Google Ads
 *
 * How it works:
 * ─────────────  
 * • Tab 1 (HourlyCosts): Logs the last complete hour per individual campaign
 * • Tab 2 (DailyCosts): Logs yesterday's totals per campaign (with duplicate prevention)
 * • Script runs every hour to build a time-series dataset
 * • YOU compare this logged data with your dashboard after several days/weeks
 *
 * Tab 1 structure: Date | Hour | Campaign ID | Campaign Name | Campaign Type | Cost | Clicks | Impressions | Conversions | Conv. Value
 * Tab 2 structure: Date | Campaign ID | Campaign Name | Campaign Type | Cost | Clicks | Impressions | Conversions | Conv. Value
 */

// CONFIGURATION ──────────────────────────────────────────────────────────────
// IMPORTANT: Make a copy of the spreadsheet and insert YOUR spreadsheet URL below
const SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1j_IOYx1xvZ6cc1aCCKAhsv0nhxnviN9ymDhf1abwh1s/copy";
const CONFIG = {
  labelName: "none",        // Optional: Filter by label name (use "none" for all campaigns)
  timeZone: "Europe/Amsterdam",
  DEBUG: true               // Set to false to reduce log output
};

// ════════════════════════════════════════════════════════════════════════════
// DO NOT MODIFY ANYTHING BELOW THIS LINE
// ════════════════════════════════════════════════════════════════════════════

/** Utility: log when DEBUG = true */
function logDebug(msg) {
  if (CONFIG.DEBUG) Logger.log(msg);
}

/** Entry point */
function main() {
  try {
    logDebug("=== Hourly & Daily Spend Logger start ===");
    
    // Get account currency
    const currencyCode = AdsApp.currentAccount().getCurrencyCode();
    logDebug(`Account currency: ${currencyCode}`);
    
    const ss = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
    if (!ss) {
      Logger.log("Spreadsheet access failed. Check SPREADSHEET_URL");
      return;
    }

    // Tab 1: Hourly costs per campaign
    const hourlySheet = getOrCreateSheet(ss, "HourlyCosts", getHourlyHeaders(currencyCode));
    const hourlyRecords = fetchHourlyCosts();
    if (hourlyRecords.length > 0) {
      const newHourlyRecords = filterHourlyDuplicates(hourlySheet, hourlyRecords);
      if (newHourlyRecords.length > 0) {
        appendRecords(hourlySheet, newHourlyRecords, true, currencyCode);
        logDebug(`Wrote ${newHourlyRecords.length} new records to HourlyCosts`);
      } else {
        logDebug("All hourly records already exist - skipping.");
      }
    } else {
      logDebug("No hourly records to write.");
    }

    // Tab 2: Daily costs per campaign (yesterday only, with duplicate check)
    const dailySheet = getOrCreateSheet(ss, "DailyCosts", getDailyHeaders(currencyCode));
    const dailyRecords = fetchDailyCosts();
    if (dailyRecords.length > 0) {
      const newRecords = filterDuplicates(dailySheet, dailyRecords);
      if (newRecords.length > 0) {
        appendRecords(dailySheet, newRecords, false, currencyCode);
        logDebug(`Wrote ${newRecords.length} new records to DailyCosts`);
      } else {
        logDebug("All daily records already exist - skipping.");
      }
    } else {
      logDebug("No daily records to write.");
    }

    logDebug("=== Hourly & Daily Spend Logger done ===");
  } catch (e) {
    Logger.log(`Error in main function: ${e}`);
  }
}

/**
 * Fetch hourly costs for the last complete hour, per individual campaign
 */
function fetchHourlyCosts() {
  const now = new Date();
  const lastCompleteHour = new Date(now);
  lastCompleteHour.setHours(now.getHours() - 1);
  lastCompleteHour.setMinutes(0, 0, 0);
  
  const dateForQuery = Utilities.formatDate(lastCompleteHour, CONFIG.timeZone, 'yyyyMMdd');
  const dateForDisplay = Utilities.formatDate(lastCompleteHour, CONFIG.timeZone, 'yyyy-MM-dd');
  const hour = Utilities.formatDate(lastCompleteHour, CONFIG.timeZone, 'HH:00');
  const hourOfDay = parseInt(Utilities.formatDate(lastCompleteHour, CONFIG.timeZone, 'HH'));
  
  logDebug(`Fetching hourly data for ${dateForQuery} hour ${hour}`);

  // Optional label filtering
  let allowedCampaignIds = null;
  if (CONFIG.labelName !== "none") {
    allowedCampaignIds = getLabeledCampaignIds();
    logDebug(`Label filter active → ${allowedCampaignIds.size} campaigns allowed`);
  }

  const query = `
    SELECT 
      segments.date,
      segments.hour,
      campaign.id,
      campaign.name,
      campaign.advertising_channel_type,
      metrics.cost_micros,
      metrics.clicks,
      metrics.impressions,
      metrics.conversions,
      metrics.conversions_value
    FROM campaign
    WHERE segments.date = '${dateForQuery}'
      AND segments.hour = ${hourOfDay}
      AND campaign.status = 'ENABLED'
  `;

  const report = AdsApp.report(query);
  const rows = report.rows();
  const records = [];

  while (rows.hasNext()) {
    try {
      const row = rows.next();
      const cid = row['campaign.id'];
      if (!cid) continue; // Skip if no campaign ID
      
      if (allowedCampaignIds && !allowedCampaignIds.has(cid)) continue;

      const campaignName = row['campaign.name'] || '';
      const typeRaw = row['campaign.advertising_channel_type'] || 'UNKNOWN';
      const campaignType = classifyCampaignType(typeRaw);

      const costMicros = Number(row['metrics.cost_micros']) || 0;
      const clicks = Number(row['metrics.clicks']) || 0;
      const impressions = Number(row['metrics.impressions']) || 0;
      const conversions = Number(row['metrics.conversions']) || 0;
      const convValue = Number(row['metrics.conversions_value']) || 0;

      records.push({
        date: dateForDisplay,
        hour: hour,
        campaignId: cid,
        campaignName: campaignName,
        campaignType: campaignType,
        cost: costMicros / 1000000,
        clicks: clicks,
        impressions: impressions,
        conversions: conversions,
        convValue: convValue
      });
    } catch (e) {
      Logger.log(`Error processing hourly row: ${e}`);
    }
  }

  return records;
}

/**
 * Fetch daily costs for yesterday, per individual campaign
 */
function fetchDailyCosts() {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const dateForQuery = Utilities.formatDate(yesterday, CONFIG.timeZone, 'yyyyMMdd');
  const dateForDisplay = Utilities.formatDate(yesterday, CONFIG.timeZone, 'yyyy-MM-dd');
  
  logDebug(`Fetching daily data for ${dateForQuery}`);

  // Optional label filtering
  let allowedCampaignIds = null;
  if (CONFIG.labelName !== "none") {
    allowedCampaignIds = getLabeledCampaignIds();
    logDebug(`Label filter active → ${allowedCampaignIds.size} campaigns allowed`);
  }

  const query = `
    SELECT 
      segments.date,
      campaign.id,
      campaign.name,
      campaign.advertising_channel_type,
      metrics.cost_micros,
      metrics.clicks,
      metrics.impressions,
      metrics.conversions,
      metrics.conversions_value
    FROM campaign
    WHERE segments.date = '${dateForQuery}'
      AND campaign.status = 'ENABLED'
  `;

  const report = AdsApp.report(query);
  const rows = report.rows();
  const records = [];

  while (rows.hasNext()) {
    try {
      const row = rows.next();
      const cid = row['campaign.id'];
      if (!cid) continue; // Skip if no campaign ID
      
      if (allowedCampaignIds && !allowedCampaignIds.has(cid)) continue;

      const campaignName = row['campaign.name'] || '';
      const typeRaw = row['campaign.advertising_channel_type'] || 'UNKNOWN';
      const campaignType = classifyCampaignType(typeRaw);

      const costMicros = Number(row['metrics.cost_micros']) || 0;
      const clicks = Number(row['metrics.clicks']) || 0;
      const impressions = Number(row['metrics.impressions']) || 0;
      const conversions = Number(row['metrics.conversions']) || 0;
      const convValue = Number(row['metrics.conversions_value']) || 0;

      records.push({
        date: dateForDisplay,
        campaignId: cid,
        campaignName: campaignName,
        campaignType: campaignType,
        cost: costMicros / 1000000,
        clicks: clicks,
        impressions: impressions,
        conversions: conversions,
        convValue: convValue
      });
    } catch (e) {
      Logger.log(`Error processing daily row: ${e}`);
    }
  }

  return records;
}

/** Write records to sheet (appended beneath existing data) */
function appendRecords(sheet, records, isHourly, currencyCode) {
  const rows = isHourly 
    ? records.map(r => [
        r.date,
        r.hour,
        r.campaignId,
        r.campaignName,
        r.campaignType,
        r.cost,
        r.clicks,
        r.impressions,
        r.conversions,
        r.convValue
      ])
    : records.map(r => [
        r.date,
        r.campaignId,
        r.campaignName,
        r.campaignType,
        r.cost,
        r.clicks,
        r.impressions,
        r.conversions,
        r.convValue
      ]);

  const startRow = sheet.getLastRow() + 1;
  const range = sheet.getRange(startRow, 1, rows.length, rows[0].length);
  range.setValues(rows);

  // Basic formatting – currency columns (Cost & Conversion Value)
  const costCol = isHourly ? 6 : 5;
  const convValueCol = isHourly ? 10 : 9;
  
  // Get currency symbol based on currency code
  const currencySymbol = getCurrencySymbol(currencyCode);
  const numberFormat = currencySymbol ? `${currencySymbol}#,##0.00` : '#,##0.00';
  
  sheet.getRange(startRow, costCol, rows.length, 1).setNumberFormat(numberFormat);
  sheet.getRange(startRow, convValueCol, rows.length, 1).setNumberFormat(numberFormat);
}

/** Filter out records that already exist in the sheet (for hourly tab) */
function filterHourlyDuplicates(sheet, records) {
  if (sheet.getLastRow() <= 1) return records; // No data yet

  const existingData = sheet.getRange(2, 1, sheet.getLastRow() - 1, 3).getValues();
  const existingKeys = new Set();
  existingData.forEach(row => {
    // Normalize date to string format yyyy-MM-dd
    const dateStr = row[0] instanceof Date 
      ? Utilities.formatDate(row[0], CONFIG.timeZone, 'yyyy-MM-dd')
      : String(row[0]);
    // Normalize hour - might be stored as Date/Time object in Sheets
    const hourStr = row[1] instanceof Date
      ? Utilities.formatDate(row[1], CONFIG.timeZone, 'HH:00')
      : String(row[1]);
    const campaignIdStr = String(row[2]);
    const key = `${dateStr}|${hourStr}|${campaignIdStr}`; // date|hour|campaignId
    existingKeys.add(key);
  });

  logDebug(`HourlyCosts: Found ${existingKeys.size} existing records`);

  const filtered = records.filter(r => {
    const key = `${r.date}|${r.hour}|${String(r.campaignId)}`;
    const exists = existingKeys.has(key);
    if (exists && CONFIG.DEBUG) {
      logDebug(`  Skipping duplicate: ${key}`);
    }
    return !exists;
  });

  return filtered;
}

/** Filter out records that already exist in the sheet (for daily tab) */
function filterDuplicates(sheet, records) {
  if (sheet.getLastRow() <= 1) return records; // No data yet

  const existingData = sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getValues();
  const existingKeys = new Set();
  existingData.forEach(row => {
    // Normalize date to string format yyyy-MM-dd
    const dateStr = row[0] instanceof Date 
      ? Utilities.formatDate(row[0], CONFIG.timeZone, 'yyyy-MM-dd')
      : String(row[0]);
    const key = `${dateStr}|${row[1]}`; // date|campaignId
    existingKeys.add(key);
  });

  logDebug(`DailyCosts: Found ${existingKeys.size} existing records`);

  const filtered = records.filter(r => {
    const key = `${r.date}|${r.campaignId}`;
    const exists = existingKeys.has(key);
    if (exists && CONFIG.DEBUG) {
      logDebug(`  Skipping duplicate: ${key}`);
    }
    return !exists;
  });

  return filtered;
}

/** Ensure sheet exists and has headers */
function getOrCreateSheet(ss, name, headers) {
  let sh = ss.getSheetByName(name);
  if (!sh) {
    sh = ss.insertSheet(name);
    sh.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight('bold');
    sh.setFrozenRows(1);
  }
  return sh;
}

function getHourlyHeaders(currencyCode) {
  const currency = currencyCode ? ` (${currencyCode})` : '';
  return [
    'Date',
    'Hour',
    'Campaign ID',
    'Campaign Name',
    'Campaign Type',
    `Cost${currency}`,
    'Clicks',
    'Impressions',
    'Conversions',
    `Conversion Value${currency}`
  ];
}

function getDailyHeaders(currencyCode) {
  const currency = currencyCode ? ` (${currencyCode})` : '';
  return [
    'Date',
    'Campaign ID',
    'Campaign Name',
    'Campaign Type',
    `Cost${currency}`,
    'Clicks',
    'Impressions',
    'Conversions',
    `Conversion Value${currency}`
  ];
}

/**
 * Returns a Set of campaign IDs that contain CONFIG.labelName
 */
function getLabeledCampaignIds() {
  const customerId = AdsApp.currentAccount().getCustomerId().replace(/-/g, '');
  const labelsIt   = AdsApp.labels().get();
  const ids = [];
  while (labelsIt.hasNext()) {
    const l = labelsIt.next();
    if (l.getName().includes(CONFIG.labelName)) ids.push(l.getId());
  }
  const campaignsSet = new Set();
  ids.forEach(id => {
    const labelStr = `customers/${customerId}/labels/${id}`;
    const cIt = AdsApp.campaigns()
      .withCondition(`campaign.labels CONTAINS ANY ('${labelStr}')`)
      .withCondition('campaign.status = ENABLED')
      .get();
    while (cIt.hasNext()) campaignsSet.add(cIt.next().getId());
  });
  return campaignsSet;
}

/** Classify channel type → friendly name */
function classifyCampaignType(channelType) {
  switch ((channelType || '').toUpperCase()) {
    case 'SEARCH':      return 'Search';
    case 'DISPLAY':     return 'Display';
    case 'SHOPPING':    return 'Shopping';
    case 'VIDEO':       return 'YouTube';
    case 'MULTI_CHANNEL': return 'Performance Max';
    case 'HOTEL':       return 'Hotel';
    case 'LOCAL':       return 'Local';
    case 'DISCOVERY':   return 'Discovery';
    case 'DEMAND_GEN':  return 'Demand Gen';
    default:            return channelType.charAt(0).toUpperCase() + channelType.slice(1).toLowerCase();
  }
}

/** Get currency symbol for number formatting based on currency code */
function getCurrencySymbol(currencyCode) {
  const symbols = {
    'EUR': '€',
    'USD': '$',
    'GBP': '£',
    'JPY': '¥',
    'CHF': 'CHF ',
    'CAD': 'CA$',
    'AUD': 'A$',
    'NZD': 'NZ$',
    'ZAR': 'R ',
    'SEK': 'kr ',
    'NOK': 'kr ',
    'DKK': 'kr ',
    'PLN': 'zł ',
    'CZK': 'Kč ',
    'HUF': 'Ft '
  };
  return symbols[currencyCode] || '';
}
